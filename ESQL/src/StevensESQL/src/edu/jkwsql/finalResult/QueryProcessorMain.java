package edu.jkwsql.finalResult;

import edu.jkwsql.database.DatabaseProcessor;
import edu.jkwsql.dataobjects.DatabaseSettingsDO;
import edu.jkwsql.dataobjects.PhiOperandsDO;
import edu.jkwsql.json.JSONProcessor;

import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Created by dimitrikoshkin on 4/19/14.
 * The program that will read a JSON file containing the Phi operators generated by the StevensESQLMain program and generate an output based on the query
 */
public class QueryProcessorMain {

    public static void main(String[] args) {
//        Read the database settings from a JSON file
        DatabaseSettingsDO databaseSettings = (DatabaseSettingsDO) JSONProcessor.fromJSON("database.json", new DatabaseSettingsDO());
//        Get Database connection and connect to it, the settings were tested before in the StevensESQLMain GUI
        DatabaseProcessor databaseProcessor = new DatabaseProcessor(databaseSettings);
        databaseProcessor.connect();

//        Execute query to get information schema
        ResultSet resultSet = databaseProcessor.executeQuery(
                "SELECT table_name, column_name, data_type, character_maximum_length\n" +
                        "FROM INFORMATION_SCHEMA.Columns\n" +
                        "WHERE table_name = 'sales'");

//        Read the phi operands from a JSON file generated by the GUI from user input
        PhiOperandsDO phi = (PhiOperandsDO) JSONProcessor.fromJSON("phi.json", new PhiOperandsDO());

//        Create a list of select attributes(S) and remove all F-Vect(F), yields all the simple attributes
        List<String> simpleAttributesString = new ArrayList<String>(phi.getS());
        simpleAttributesString.removeAll(phi.getF());

//        Get all the simple attributes and their datatypes
        SelectAttributes selectAttributes = new SelectAttributes();
        for (String attr : simpleAttributesString) {
            String dataType = databaseProcessor.getDataType(resultSet, attr);
            selectAttributes.add(attr, new SimpleAttributesDO(getVariableType(dataType), null));

        }

//        Create a list of F-Vect(F), yields all the aggregate attributes
        List<String> aggregateAttributesString = new ArrayList<String>(phi.getF());

//        Get all the aggregate attributes and their datatypes and their aggregate functions
        SelectAttributes aggregateAttributes = new SelectAttributes();
        for (String attr : aggregateAttributesString) {
            List<String> splitAttribute = new ArrayList<String>(Arrays.asList(attr.split("_")));
//TODO handle implicit aggregates or aggregates over the whole grouping variable
            String dataType = databaseProcessor.getDataType(resultSet, splitAttribute.get(1));
            aggregateAttributes.add(splitAttribute.get(0), new AggregateAttributesDO(splitAttribute.get(1), getVariableType(dataType), splitAttribute.get(2), null));
        }

        MFStructure mfStructure = new MFStructure(selectAttributes, aggregateAttributes);
    }

    //    Method the variable type based on the data_type column in the db
    static String getVariableType(String dataType) {
        String variableType = "";
        if (dataType.equals("character") || dataType.equals("character varying"))
            variableType = "String";
        else if (dataType.equals("integer"))
            variableType = "int";
        else if (dataType.equals("date"))
            variableType = "Date";
        else if (dataType.equals("time"))
            variableType = "Time";

        return variableType;
    }
}
